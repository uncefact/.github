name: jargon_onSnapshot

on:
  workflow_call:
    
env:
  # Setting an environment variable with the value of a configuration variable
  domain_name: ${{ github.event.client_payload.domain.name }}
  prefix: ${{ github.event.client_payload.settings.jsonld.prefix }}

jobs:
  sync:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: write
      pull-requests: write

    steps:
      - name: Get Token
        id: get_workflow_token
        uses: peter-murray/workflow-application-token-action@v4
        with:
          application_id: ${{ secrets.APP_ID }}
          application_private_key: ${{ secrets.APP_PRIVATE_KEY }}
      - uses: actions/checkout@v4
        with:
          ref: data-models-staging
          token: ${{ steps.get_workflow_token.outputs.token }}
      - run: 'echo "Domain name: ${{ env.domain_name }}"'
      - run: 'echo "client_payload: ${{ github.event.client_payload }}"'

      - name: Check if settings.jsonld.prefix is not blank
        run: '[ "${{ env.prefix }}" = "" ] && exit 1 || exit 0'
      
      - name: Check if ${{ env.prefix }} directory exists
        working-directory: "data-models/"
        run: '[ -d ${{ env.prefix }} ] || mkdir ${{ env.prefix }}'
      
      - name: Check if ${{ env.prefix }}/artefacts directory exists
        working-directory: "data-models/${{ env.prefix }}"
        run: '[ -d artefacts ] || mkdir artefacts'

      - name: Download files
        working-directory: "data-models/${{ env.prefix }}/"
        shell: bash
        run: |
          wget -O vocabulary.jsonld ${{ github.event.client_payload.artefacts.jsonldVocab.url }}
          wget -O artefacts/context.jsonld ${{ github.event.client_payload.artefacts.jsonldContext.url }}

          for schema_url in $(echo '${{ toJson(github.event.client_payload.artefacts.jsonSchemas) }}' | jq -r '.[].url'); do
            filename=${schema_url#*=}
            if [[ "$filename" =~ .*_instance$ ]]; then
                filename=${filename//_/-}
            else
                filename="$filename-schema"
            fi
            wget -O artefacts/${filename}.json ${schema_url}
          done

      - name: Prepare PR title and body
        id: check
        env:
          GITHUB_TOKEN: ${{ steps.get_workflow_token.outputs.token }}
        run: |
          prs=$(gh pr list \
              --head 'feature/jargon-sync-${{ env.prefix }}' \
              --base 'data-models-staging' \
              --json title,body')
          #TODO: add a check that there is a single match or none
          pr_title=$(echo $prs | jq '.[].title')
          default_pr_title='chore: sync ${{ github.event.client_payload.domain.name }} data model with Jargon snapshot ${{ github.event.client_payload.snapshot.index }}'
          pr_title=${pr_title:-$default_pr_title}
          pr_body=$(echo $prs | jq '.[].body')
          default_pr_body='${{ github.event.client_payload.snapshot.description }}'
          pr_body="$pr_body\n$default_pr_body"         
          
          echo "pr_title=$pr_title" >> "$GITHUB_ENV"
          echo "pr_body=$pr_body" >> "$GITHUB_ENV"

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v7
        with:
          commit-message: 'chore: sync ${{ github.event.client_payload.domain.name }} data model with Jargon snapshot ${{ github.event.client_payload.snapshot.index }}'
          committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          signoff: false
          branch: feature/jargon-sync-${{ env.prefix }}
          delete-branch: true
          title: ${{ env.pr_title}}
          body: |
            ${{ env.pr_body}}
          draft: false
          token: ${{ steps.get_workflow_token.outputs.token }}
